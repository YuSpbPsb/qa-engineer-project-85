---
#
- summary: |
    Создание игры без регистрации
  requirement: |
    Пользователь должен иметь возможность создавать игры без регистрации
  prerequisites: |
    no data
  test-data: |
    no data
  steps:
    - Нажимаем кнопку "TRY SIMPLE BATTLE"    
  expected-result: |
    Пользователь должен попасть на случайную подготовленную игру с ботом.
#
- summary: |
     Регистрация по email
  requirement: |
    Пользователь должен иметь возможность зарегестрироваться
  prerequisites:
    no data
  test-data: |
    Nickname = test_user12348
    Email = берём с сайта: https://temp-mail.org
    Password = n3$TaGM4G8Se!)@
    Password Confirmation = n3$TaGM4G8Se!)@
  steps:
    - Нажимаем кнопку "Sing up"
    - Вводим Nickname; Email; Password; Password Confirmation; 
    - Нажимаем кнопку «Submit»
  expected-result: |
    Пользователь попадает на главную страницу
#
- summary: |
    Авторизации пользователя по email
  requirement: |
    Пользователь должен иметь возможность авторизоваться
  prerequisites:
    no data
  test-data: |
    Email = codebatt_test_1234@tutamail.com;  Password = n3$TaGM4G8Se!)@;
  steps:
    - Нажимаем кнопку "Sing in"
    - Вводим пароль и email
    - Нажимаем кнопку «Submit»
  expected-result: |
    Пользователь попадает на главную страницу
#
- summary: |
    Авторизации пользователя по email
  requirement: |
    Пользователь должен иметь возможность авторизоваться
  prerequisites:
    no data
  test-data: |
    Email = codebatt_test_1234@tutamail.com Password = n3$TaGM4G8Se!)@
  steps:
    - Нажимаем кнопку "Sing in"
    - Вводим пароль и email
    - Нажимаем кнопку «Submit»
  expected-result: |
    Пользователь попадает на главную страницу
#
- summary: |
    Восстановление пароля по email
  requirement: |
    Пользователь должен иметь возможность восстановления пароля по email
  prerequisites:
    no data
  test-data: |
    Email = codebatt_test_1234@tutamail.com Password = n3$TaGM4G8Se!)@
  steps:
    - Нажимаем кнопку "Sing in"
    - Нажимаем кнопку "Forgot your password?" 
    - Вводим Email
    - Нажимаем кнопку «Submit»
    - В почте находим письмо от Codebattle и переходим по ссылке для восстановления
    - Вводим Password  в поле "New password"
    - Нажимаем кнопку «Save»
  expected-result: |
    Новый пароль для аккаунта установлен
#
- summary: |
    Проверка авторизации незарегистрированного пользователя
  requirement: |
    Пользователь не может авторизоваться под ранее незарегистрированной почтой
  prerequisites: |
    empty
  test-data: |
    Email = nodata@nodata.nodata Password = not_password
  steps: 
    - Нажать на кнопку "Sign in"
    - Ввести Email
    - Ввести Password
    - Нажать на Submit
  expected-result: |
    Авторизация не произошла, пользователь увидел сообщение об ошибке
#
- summary: |
    Проверка авторизации по аккаунту в Github
  requirement: |
    Пользователь должен иметь возможность авторизоваться
  prerequisites: | 
    На устройстве/в браузере есть авторизованный аккаунт Github
  test-data: |
    no data
  steps:
    - Нажимаем кнопку "Sing in"
    - Нажимаем кнопку "Sing in with Github"
    - В окне подтверждения нажимаем кнопку "Авторизоваться"        
  expected-result: |
    Пользователь попадает на главную страницу
#
- summary: |
    Проверка авторизации по аккаунту в Discord
  requirement: |
    Пользователь должен иметь возможность авторизоваться
  prerequisites: | 
    На устройстве/в браузере есть авторизованный аккаунт Discord
  test-data: |
    no data
  steps:
    - Нажимаем кнопку "Sing in"
    - Нажимаем кнопку "Sing in with Discord"
    - В окне подтверждения нажимаем кнопку "Авторизоваться"   
  expected-result: |
    Пользователь попадает на главную страницу 
#
- summary: |
    Проверка создания игры с ботом
  requirement: |
    Пользователь должен иметь возможность создавать игры c ботом
  prerequisites: | 
    Пользователь авторизован
  test-data: |
    no data
  steps:
    - Нажимаем кнопку "CREATE A GAME"
    - Выбираем Level - 1
    - Выбираем Game Type - With a bot
    - Выбираем Time control - 10 min
    - Выбираем Chose task by name or tags - random task
    - Нажимаем кнопку "Create battle"    
  expected-result: |
    Игра с ботом запускается
#
- summary: |
    Проверка возможности победы пользователя в игре с ботом
  requirement: |
    Пользователь должен иметь возможность создавать игры c ботом
  prerequisites: | 
    Пользователь авторизован
  test-data: |
    Код: qa-engineer-project-85\assets\game_with_bot_1.md
  steps:
    - Нажимаем кнопку "CREATE A GAME"
    - Выбираем Level - 1
    - Выбираем Game Type - With a bot
    - Выбираем Time control - 10 min
    - Выбираем Chose task by name or tags - react_area
    - Нажимаем кнопку "Create battle"
    - Выбираем язык - Node.js
    - Встввляем подготовленный код в редактор
    - Нажимаем "Run"
  expected-result: |
    Игра с ботом запускается, пользователь побеждает
#
- summary: |
    Проверка возможности сдаться в игре с ботом
  requirement: |
    Пользователь должен иметь возможность создавать игры c ботом
  prerequisites: | 
    Пользователь авторизован
  test-data: |
    no data
  steps:
    - Нажимаем кнопку "CREATE A GAME"
    - Выбираем Level - 4
    - Выбираем Game Type - With a bot
    - Выбираем Time control - 3 min
    - Выбираем Chose task by name or tags - react_area
    - Нажимаем кнопку "Create battle"
    - Нажимаем кнопку "Give Up"/ красный флаг
    -  Нажимаем кнопку "Give Up" в окне подтверждения
  expected-result: |
    Игра с ботом запускается, пользователь сдается и пороигрывает
#
- summary: |
    Проверка выбора языка программирования в активной игре
  requirement: |
    Пользователь может выбрать язык для решения задачи в игре
  prerequisites: |
    empty
  test-data: |
    empty
  steps: 
    - Создать игру, например, с ботом
    - В игре в выпадающем меню выбрать любой язык программирования, например, C#
  expected-result: |
    Язык программирования сменился на выбранный